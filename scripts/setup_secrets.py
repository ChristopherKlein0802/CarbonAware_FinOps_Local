#!/usr/bin/env python3
"""
Setup script for Carbon-Aware FinOps secrets management.
"""

import os
import sys
import argparse
import getpass
from typing import Dict, Optional

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.utils.secrets_manager import SecretsManager, setup_secrets_from_env
from src.utils.logging_config import get_logger

logger = get_logger('secrets-setup')


def prompt_for_secrets() -> Dict[str, str]:
    """Interactively prompt for secrets."""
    secrets = {}
    
    print("\n=== Carbon-Aware FinOps Secrets Setup ===")
    print("Enter your API credentials (press Enter to skip optional secrets):\n")
    
    # ElectricityMap API Key
    electricitymap_key = getpass.getpass("ElectricityMap API Key (optional): ").strip()
    if electricitymap_key:
        secrets['ELECTRICITYMAP_API_KEY'] = electricitymap_key
    
    # WattTime Credentials
    print("\nWattTime Credentials (optional):")
    watttime_username = input("  Username: ").strip()
    if watttime_username:
        watttime_password = getpass.getpass("  Password: ").strip()
        if watttime_password:
            secrets['WATTTIME_USERNAME'] = watttime_username
            secrets['WATTTIME_PASSWORD'] = watttime_password
    
    # Dashboard Secret Key
    dashboard_secret = getpass.getpass("\nDashboard Secret Key (required): ").strip()
    if not dashboard_secret:
        dashboard_secret = input("Use default development key? (y/n): ").lower() == 'y'
        if dashboard_secret:
            dashboard_secret = 'dev-secret-key-change-in-production'
        else:
            dashboard_secret = getpass.getpass("Dashboard Secret Key: ").strip()
    
    secrets['DASHBOARD_SECRET_KEY'] = dashboard_secret
    
    return secrets


def create_env_file(secrets: Dict[str, str], env_file: str = '.env') -> bool:
    """Create environment file with secrets."""
    try:
        with open(env_file, 'w') as f:
            f.write("# Carbon-Aware FinOps Environment Variables\n")
            f.write("# Generated by setup_secrets.py\n\n")
            
            f.write("# AWS Configuration\n")
            f.write("export AWS_PROFILE=carbon-finops-sandbox\n")
            f.write("export AWS_REGION=eu-central-1\n")
            f.write("export ENVIRONMENT=development\n\n")
            
            f.write("# API Keys\n")
            for key, value in secrets.items():
                f.write(f"export {key}={value}\n")
            
            f.write("\n# Logging\n")
            f.write("export LOG_LEVEL=INFO\n")
        
        logger.info(f"Created environment file: {env_file}")
        print(f"\n‚úÖ Environment file created: {env_file}")
        print("To load these variables, run:")
        print(f"  source {env_file}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to create environment file: {e}")
        return False


def setup_aws_secrets(secrets_manager: SecretsManager, secrets: Dict[str, str]) -> bool:
    """Set up secrets in AWS Secrets Manager."""
    logger.info("Setting up secrets in AWS Secrets Manager...")
    
    # Convert environment variables to AWS secrets format
    aws_secrets = {}
    
    if 'ELECTRICITYMAP_API_KEY' in secrets:
        aws_secrets['carbon-finops/electricitymap-api-key'] = secrets['ELECTRICITYMAP_API_KEY']
    
    if 'WATTTIME_USERNAME' in secrets and 'WATTTIME_PASSWORD' in secrets:
        import json
        watttime_creds = json.dumps({
            'username': secrets['WATTTIME_USERNAME'],
            'password': secrets['WATTTIME_PASSWORD']
        })
        aws_secrets['carbon-finops/watttime-credentials'] = watttime_creds
    
    if 'DASHBOARD_SECRET_KEY' in secrets:
        aws_secrets['carbon-finops/dashboard-secret'] = secrets['DASHBOARD_SECRET_KEY']
    
    if not aws_secrets:
        logger.warning("No secrets to create in AWS Secrets Manager")
        return True
    
    try:
        success = secrets_manager.create_aws_secrets(aws_secrets)
        if success:
            print("‚úÖ All secrets created in AWS Secrets Manager")
        else:
            print("‚ö†Ô∏è  Some secrets may already exist in AWS Secrets Manager")
        return True
        
    except Exception as e:
        logger.error(f"Failed to create AWS secrets: {e}")
        print(f"‚ùå Failed to create AWS secrets: {e}")
        return False


def validate_setup(secrets_manager: SecretsManager) -> bool:
    """Validate that secrets are accessible."""
    logger.info("Validating secrets setup...")
    
    try:
        # Test required secrets
        dashboard_secret = secrets_manager.get_secret('dashboard_secret_key')
        if not dashboard_secret:
            print("‚ùå Dashboard secret key not found")
            return False
        
        # Test optional secrets (no failure if missing)
        electricitymap_key = secrets_manager.get_secret('electricitymap_api_key')
        watttime_username = secrets_manager.get_secret('watttime_username')
        
        print("‚úÖ Secrets validation completed")
        print(f"  - Dashboard secret: {'‚úì' if dashboard_secret else '‚úó'}")
        print(f"  - ElectricityMap key: {'‚úì' if electricitymap_key else '‚úó (optional)'}")
        print(f"  - WattTime credentials: {'‚úì' if watttime_username else '‚úó (optional)'}")
        
        return True
        
    except Exception as e:
        logger.error(f"Secrets validation failed: {e}")
        print(f"‚ùå Secrets validation failed: {e}")
        return False


def main():
    """Main setup function."""
    parser = argparse.ArgumentParser(
        description="Setup secrets for Carbon-Aware FinOps",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Interactive setup with environment file only
  python scripts/setup_secrets.py --env-only
  
  # Setup with AWS Secrets Manager
  python scripts/setup_secrets.py --aws-profile carbon-finops-sandbox
  
  # Use existing environment variables
  python scripts/setup_secrets.py --from-env --aws-profile carbon-finops-sandbox
        """
    )
    
    parser.add_argument(
        '--aws-profile',
        help='AWS profile for Secrets Manager (if not provided, only env file created)'
    )
    parser.add_argument(
        '--region',
        default='eu-central-1',
        help='AWS region for Secrets Manager'
    )
    parser.add_argument(
        '--env-file',
        default='.env',
        help='Environment file to create'
    )
    parser.add_argument(
        '--from-env',
        action='store_true',
        help='Use existing environment variables instead of prompting'
    )
    parser.add_argument(
        '--env-only',
        action='store_true',
        help='Create environment file only (no AWS Secrets Manager)'
    )
    parser.add_argument(
        '--validate-only',
        action='store_true',
        help='Only validate existing secrets setup'
    )
    
    args = parser.parse_args()
    
    # Initialize secrets manager
    secrets_manager = None
    if args.aws_profile and not args.env_only:
        try:
            secrets_manager = SecretsManager(args.aws_profile, args.region)
            logger.info(f"Initialized secrets manager with profile: {args.aws_profile}")
        except Exception as e:
            logger.error(f"Failed to initialize secrets manager: {e}")
            print(f"‚ùå Failed to initialize AWS Secrets Manager: {e}")
            if not args.validate_only:
                print("Continuing with environment file only...")
    
    # Validation only mode
    if args.validate_only:
        if not secrets_manager:
            print("‚ùå Cannot validate without AWS profile")
            return 1
        
        success = validate_setup(secrets_manager)
        return 0 if success else 1
    
    # Get secrets
    if args.from_env:
        logger.info("Using existing environment variables")
        secrets = {
            'ELECTRICITYMAP_API_KEY': os.getenv('ELECTRICITYMAP_API_KEY', ''),
            'WATTTIME_USERNAME': os.getenv('WATTTIME_USERNAME', ''),
            'WATTTIME_PASSWORD': os.getenv('WATTTIME_PASSWORD', ''),
            'DASHBOARD_SECRET_KEY': os.getenv('DASHBOARD_SECRET_KEY', 'dev-secret-key-change-in-production')
        }
        # Remove empty values
        secrets = {k: v for k, v in secrets.items() if v}
    else:
        secrets = prompt_for_secrets()
    
    if not secrets:
        print("‚ùå No secrets provided")
        return 1
    
    # Create environment file
    env_success = create_env_file(secrets, args.env_file)
    if not env_success:
        return 1
    
    # Setup AWS Secrets Manager (if requested and available)
    if secrets_manager and not args.env_only:
        aws_success = setup_aws_secrets(secrets_manager, secrets)
        if aws_success:
            # Validate the setup
            validate_setup(secrets_manager)
    
    print("\nüéâ Secrets setup completed!")
    print("\nNext steps:")
    print(f"1. Load environment variables: source {args.env_file}")
    print("2. Test the setup: python scripts/setup_secrets.py --validate-only --aws-profile carbon-finops-sandbox")
    print("3. Run the application components")
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Unexpected error during setup: {e}")
        print(f"\n‚ùå Setup failed: {e}")
        sys.exit(1)